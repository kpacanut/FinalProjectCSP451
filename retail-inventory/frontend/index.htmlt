<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Kath’s Store — Update Stock & Product</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    :root{
      --bg1:#fde1f0; --bg2:#d8f7e8; --card:#ffffffee;
      --pink:#ff6fb3; --mint:#5fd3c1; --lilac:#8a7ff6; --peach:#ffb07c;
      --ink:#2b3440; --muted:#7a8898; --ok:#16a34a; --bad:#ef4444;
      --ring: 0 10px 30px rgba(0,0,0,.08), 0 2px 8px rgba(0,0,0,.04);
    }
    html,body{height:100%}
    body{
      margin:0; font-family: ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial;
      color:var(--ink);
      background:
        radial-gradient(1200px 1200px at 10% -10%, var(--bg1), transparent 60%),
        radial-gradient(1200px 1200px at 110% 110%, var(--bg2), transparent 60%),
        #faf9ff;
      position:relative;
    }
    /* soft dotted flowers */
    body::before{
      content:""; pointer-events:none; position:fixed; inset:0;
      background-image:
        radial-gradient(circle at 6px 6px, #f5b1d4 2px, transparent 3px),
        radial-gradient(circle at 16px 16px, #b5e7da 2px, transparent 3px),
        radial-gradient(circle at 10px 10px, #c9c2ff 2px, transparent 3px);
      background-size: 48px 48px, 56px 56px, 64px 64px; opacity:.28;
      filter: blur(.2px);
    }
    .wrap{max-width:960px; margin:64px auto; padding:20px}
    .card{
      background:var(--card); border-radius:24px; box-shadow:var(--ring);
      padding:28px 28px 22px; backdrop-filter: blur(6px);
    }
    h1{
      margin:0 0 18px; font-weight:800; letter-spacing:.2px;
      font-size: clamp(22px, 3.2vw, 32px);
      background: linear-gradient(90deg, var(--pink), var(--lilac));
      -webkit-background-clip:text; background-clip:text; color:transparent;
    }
    .pill{display:inline-block;padding:6px 10px;border-radius:999px;font-size:12px;color:#234}
    .pill.sparkle{background:linear-gradient(90deg,#fff2f7,#eefcf7); border:1px solid #f3e7f1}
    .row{display:grid; gap:12px; grid-template-columns: 1fr 160px}
    label{font-size:12px; color:var(--muted); display:block; margin-bottom:6px}
    input{
      width:100%; box-sizing:border-box; border:1px solid #e8eaf0; background:#fff;
      padding:12px 14px; border-radius:12px; font-size:14px; outline:none;
      transition:border .15s, box-shadow .15s;
    }
    input:focus{border-color:#c9ccf7; box-shadow:0 0 0 4px #c9ccf733}
    .row2{display:grid; gap:12px; grid-template-columns: 1fr}
    .actions{display:flex; gap:10px; flex-wrap:wrap; margin-top:8px}
    .btn{
      appearance:none; border:0; padding:11px 14px; border-radius:14px; color:#fff;
      font-weight:700; box-shadow:var(--ring); cursor:pointer;
      transform: translateZ(0); transition: transform .08s ease, opacity .2s;
      user-select:none;
    }
    .btn:active{transform:translateY(1px)}
    .btn.pink{background:linear-gradient(180deg,#ff8ec7,#ff6fb3)}
    .btn.mint{background:linear-gradient(180deg,#63e1cd,#44c7b8)}
    .btn.lilac{background:linear-gradient(180deg,#a59aff,#8a7ff6)}
    .meta{display:flex; flex-wrap:wrap; gap:8px; margin:14px 0 8px}
    .chip{
      font-size:12px; padding:8px 10px; background:#f8fafc; border:1px solid #e9eef3;
      border-radius:999px; color:#334155
    }
    .chip code{font-family:ui-monospace, SFMono-Regular, Menlo, Consolas, monospace}
    .badge{font-weight:700; color:#fff; border-radius:999px; padding:6px 10px; font-size:12px}
    .ok{background:#16a34a}
    .bad{background:#ef4444}
    .note{margin-top:12px; color:var(--muted); font-size:12px}
    .alert{margin-top:14px; padding:12px 14px; border-radius:12px; background:#fff7f7; color:#b42323; border:1px solid #ffd6d6}
    .alert.ok{background:#f1fff5; border-color:#c8f7d3; color:#126b2a}
    .footer{margin-top:18px; font-size:12px; color:var(--muted)}
    @media (max-width:720px){ .row{grid-template-columns: 1fr} }
  </style>
</head>
<body>
  <div class="wrap">
    <div class="card">
      <div class="pill sparkle">sparkly • floral • fabulous</div>
      <h1>Kath’s Store — Update Stock &amp; Product</h1>

      <div class="row" style="margin-top:10px">
        <div>
          <label>Product ID</label>
          <input id="productId" placeholder="sku-999" value="sku-999" />
        </div>
        <div>
          <label>Quantity</label>
          <input id="qty" type="number" min="0" step="1" value="100" />
        </div>
      </div>

      <div class="row2" style="margin-top:10px">
        <div>
          <label>Product Name</label>
          <input id="name" placeholder="Blooming Tee" value="Blooming Tee" />
        </div>
      </div>

      <div class="actions">
        <button class="btn pink"  id="btnUpdate">Update Both</button>
        <button class="btn lilac" id="btnHealth">Check API Health</button>
        <button class="btn mint"  id="btnReset" type="button">Reset Form</button>
      </div>

      <div class="meta">
        <span class="chip">Inventory API: <code id="chipInv">detecting…</code></span>
        <span class="chip">Product API: <code id="chipProd">detecting…</code></span>
        <span class="chip">Correlation: <code id="chipCid">auto</code></span>
        <span class="chip">Auth: <span id="chipAuth" class="badge bad">key missing</span></span>
      </div>

      <div id="status" class="alert" style="display:none"></div>
      <div class="footer">Tip: the page auto-detects your server IP and ports (5001 / 5002). You can override by defining
        <code>window.API_URL_INVENTORY</code> / <code>window.API_URL_PRODUCT</code> before this file loads.</div>
    </div>
  </div>

  <!-- Client-side config (edit if you ever change the key or ports) -->
  <script>
    // ALWAYS send this key to the inventory API
    window.API_KEY = 'dev-key-001';

    // Default bases (auto-detect your VM public IP)
    const host = location.hostname || 'localhost';
    window.API_URL_INVENTORY = window.API_URL_INVENTORY || `http://${host}:5001`;
    window.API_URL_PRODUCT   = window.API_URL_PRODUCT   || `http://${host}:5002`;
  </script>

  <script>
    const el = (id)=>document.getElementById(id);
    const chipInv  = el('chipInv'), chipProd = el('chipProd'),
          chipCid  = el('chipCid'), chipAuth = el('chipAuth'),
          statusEl = el('status');

    chipInv.textContent  = window.API_URL_INVENTORY;
    chipProd.textContent = window.API_URL_PRODUCT;
    chipAuth.textContent = window.API_KEY ? 'key accepted' : 'key missing';
    chipAuth.className   = 'badge ' + (window.API_KEY ? 'ok' : 'bad');

    const newCid = () => 'cid-' + Math.random().toString(36).slice(2, 10);

    async function checkHealth() {
      statusEl.style.display='none';
      const inv = fetch(`${API_URL_INVENTORY}/health`, {
        headers: { 'x-api-key': window.API_KEY }
      }).then(r=>r.ok).catch(()=>false);

      const prod = fetch(`${API_URL_PRODUCT}/health`)
        .then(r=>r.ok).catch(()=>false);

      const [okInv, okProd] = await Promise.all([inv, prod]);

      const msg = `Inventory: ${okInv ? 'OK' : 'Fail'} • Product: ${okProd ? 'OK' : 'Fail'}`;
      statusEl.textContent = msg;
      statusEl.className = 'alert ' + (okInv && okProd ? 'ok' : '');
      statusEl.style.display = 'block';
    }

    async function updateBoth() {
      const productId = el('productId').value.trim();
      const qty       = parseInt(el('qty').value, 10);
      const name      = el('name').value.trim();
      const correlationId = newCid();
      chipCid.textContent = correlationId;

      statusEl.style.display='none';

      // Inventory: requires x-api-key
      const invReq = fetch(`${API_URL_INVENTORY}/update-stock`, {
        method:'POST',
        headers:{
          'Content-Type':'application/json',
          'x-api-key': window.API_KEY
        },
        body: JSON.stringify({ productId, qty, correlationId })
      }).then(r => r.ok);

      // Product: upsert
      const prodReq = fetch(`${API_URL_PRODUCT}/products/upsert`, {
        method:'POST',
        headers:{ 'Content-Type':'application/json' },
        body: JSON.stringify({ productId, name })
      }).then(r => r.ok);

      const [okInv, okProd] = await Promise.allSettled([invReq, prodReq])
        .then(arr => arr.map(x => x.status==='fulfilled' && x.value === true));

      const msg = (okInv && okProd)
        ? `✅ Updated! inventory ✔︎ • product ✔︎ (cid: ${correlationId})`
        : `Some calls failed → inventory ${okInv?'✔︎':'✗'} • product ${okProd?'✔︎':'✗'}`;

      statusEl.textContent = msg;
      statusEl.className = 'alert ' + (okInv && okProd ? 'ok' : '');
      statusEl.style.display='block';
    }

    function resetForm(){
      el('productId').value='sku-999';
      el('qty').value=100;
      el('name').value='Blooming Tee';
      chipCid.textContent='auto';
      statusEl.style.display='none';
    }

    el('btnUpdate').addEventListener('click', e=>{
      e.preventDefault(); updateBoth();
    });
    el('btnHealth').addEventListener('click', e=>{
      e.preventDefault(); checkHealth();
    });
    el('btnReset').addEventListener('click', e=>{
      e.preventDefault(); resetForm();
    });
  </script>
</body>
</html>
